# Python3 program to add two numbers 
  
num1 = 15
num2 = 12
  
# Adding two nos 
sum = num1 + num2 
  
# printing values 
print("Sum of {0} and {1} is {2}" .format(num1, num2, sum)) 
==============================================================

# factorial of given number 
def factorial(n): 
      
    # single line to find factorial 
    return 1 if (n==1 or n==0) else n * factorial(n - 1);  
  
# Driver Code 
num = 5; 
print("Factorial of",num,"is", 
factorial(num)) 
==================================================================
# Python3 program to find simple interest 
# for given principal amount, time and 
# rate of interest. 
  
# We can change values here for 
# different inputs 
P = 1 
R = 1 
T = 1 
  
# Calculates simple interest  
SI = (P * R * T) / 100
  
# Print the resultant value of SI  
print("simple interest is", SI) 
==========================================================

# Python3 program to find compound 
# interest for given values. 
  
def compound_interest(principle, rate, time): 
  
    # Calculates compound interest  
    CI = principle * (pow((1 + rate / 100), time)) 
    print("Compound interest is", CI) 
  
# Driver Code  
compound_interest(10000, 10.25, 5) 

==============================================================

# Python program to determine whether the number is 
# Armstrong number or not 
  
# Function to calculate x raised to the power y 
def power(x, y): 
    if y==0: 
        return 1
    if y%2==0: 
        return power(x, y/2)*power(x, y/2) 
    return x*power(x, y/2)*power(x, y/2) 
  
# Function to calculate order of the number 
def order(x): 
  
    # variable to store of the number 
    n = 0
    while (x!=0): 
        n = n+1
        x = x/10
    return n 
  
# Function to check whether the given number is 
# Armstrong number or not 
def isArmstrong (x): 
    n = order(x) 
    temp = x 
    sum1 = 0
    while (temp!=0): 
        r = temp%10
        sum1 = sum1 + power(r, n) 
        temp = temp/10
  
    # If condition satisfies 
    return (sum1 == x) 
  
  
# Driver Program 
x = 153
print(isArmstrong(x)) 
x = 1253
print(isArmstrong(x)) 


============================================================

# Python program to find Area of a circle 
  
def findArea(r): 
    PI = 3.142
    return PI * (r*r); 
  
# Driver method 
print("Area is %.6f" % findArea(5)); 
  
================================================================


# Python program to print all  
# prime number in an interval 
  
start = 11
end = 25
  
for val in range(start, end + 1): 
      
   # If num is divisible by any number   
   # between 2 and val, it is not prime  
   if val > 1: 
       for n in range(2, val): 
           if (val % n) == 0: 
               break
       else: 
           print(val) 
====================================================================
# Python program to check if 
# given number is prime or not 

num = 11

# If given number is greater than 1 
if num > 1: 
	
# Iterate from 2 to n / 2 
for i in range(2, num//2): 
		
	# If num is divisible by any number between 
	# 2 and n / 2, it is not prime 
	if (num % i) == 0: 
		print(num, "is not a prime number") 
		break
else: 
	print(num, "is a prime number") 

else: 
print(num, "is not a prime number") 

======================================================================
# Function for nth Fibonacci number 

def Fibonacci(n): 
	if n<0: 
		print("Incorrect input") 
	# First Fibonacci number is 0 
	elif n==1: 
		return 0
	# Second Fibonacci number is 1 
	elif n==2: 
		return 1
	else: 
		return Fibonacci(n-1)+Fibonacci(n-2) 

# Driver Program 

print(Fibonacci(9)) 

====================================================================
# python program to check if x is a perfect square 
import math 

# A utility function that returns true if x is perfect square 
def isPerfectSquare(x): 
	s = int(math.sqrt(x)) 
	return s*s == x 

# Returns true if n is a Fibinacci Number, else false 
def isFibonacci(n): 

	# n is Fibinacci if one of 5*n*n + 4 or 5*n*n - 4 or both 
	# is a perferct square 
	return isPerfectSquare(5*n*n + 4) or isPerfectSquare(5*n*n - 4) 
	
# A utility function to test above functions 
for i in range(1,11): 
	if (isFibonacci(i) == True): 
		print i,"is a Fibonacci Number"
	else: 
		print i,"is a not Fibonacci Number "
==============================================================================
# Python Program to find position of n\'th multiple 
# of a mumber k in Fibonacci Series 

def findPosition(k, n): 
	f1 = 0
	f2 = 1
	i =2; 
	while i!=0: 
		f3 = f1 + f2; 
		f1 = f2; 
		f2 = f3; 

		if f2%k == 0: 
			return n*i 

		i+=1
		
	return


# Multiple no. 
n = 5; 
# Number of whose multiple we are finding 
k = 4; 

print("Position of n\'th multiple of k in"
				"Fibonacci Seires is", findPosition(k,n)); 

===============================================================================
# Python program to print 
# ASCII Value of Character 

# In c we can assign different 
# characters of which we want ASCII value 

c = 'g'
# print the ASCII value of assigned character in c 
print("The ASCII value of '" + c + "' is", ord(c)) 
================================================================================

# Python3 Program to 
# find sum of square 
# of first n natural 
# numbers 

# Return the sum of 
# square of first n 
# natural numbers 
def squaresum(n) : 
	return (n * (n + 1) * (2 * n + 1)) // 6

# Driven Program 
n = 4
print(squaresum(n)) 

=====================================================================
# Simple Python program to find sum of series 
# with cubes of first n natural numbers 

# Returns the sum of series 
def sumOfSeries(n): 
	sum = 0
	for i in range(1, n+1): 
		sum +=i*i*i 
		
	return sum


# Driver Function 
n = 5
print(sumOfSeries(n)) 



														 

